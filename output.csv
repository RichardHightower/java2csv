"Name","Type","FullName","Definition","JavaDoc","Parent","Imports","Body"
"Java2CSV","class","com.cloudurable.java2csv.Java2CSV","public class Java2CSV ","/**
 * Class responsible for processing Java files from a directory and converting them into a CSV format.
 * This is done by using the Builder pattern to set the input directory path and output file name.
 */
","","import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.opencsv.CSVWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.nio.file.Files;

import java.nio.file.Path;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.regex.Pattern;

import java.util.stream.Collectors;

import java.util.stream.Stream;
","public class Java2CSV {

    /**
     * Path of the directory that contains the Java files to be converted.
     */
    private final String inputDirectoryPath;

    /**
     * Name of the file where the output of the conversion will be stored.
     */
    private final String outputFile;

    /**
     * Constructs a Java2CSV object with the specified directory path and output file.
     *
     * @param directoryPath the path of the directory that contains the Java files to be converted.
     * @param outputFile    the name of the file where the conversion output will be stored.
     */
    public Java2CSV(String directoryPath, String outputFile) {
        this.inputDirectoryPath = directoryPath;
        this.outputFile = outputFile;
    }

    /**
     * Returns a new instance of the Builder class to configure a Java2CSV object.
     *
     * @return a new Builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    public void run() throws IOException {
        File dir = new File(inputDirectoryPath).getCanonicalFile();
        if (dir.exists() && dir.isDirectory()) {
            List<JavaItem> javaItems = scanDirectory(dir);
            List<List<String>> lines = javaItems.stream().map(JavaItem::row).collect(Collectors.toList());
            try (CSVWriter writer = new CSVWriter(new FileWriter(outputFile))) {
                writer.writeNext(JavaItem.headers().toArray(new String[0]));
                for (List<String> line : lines) {
                    writer.writeNext(line.toArray(new String[0]));
                }
            }
        } else {
            throw new IllegalStateException(String.format(""Directory does not exist %s or is not a directory"", dir));
        }
    }

    /**
     * Scans the given directory and returns a list of items representing the Java code.
     *
     * @param directoryPath the directory path
     * @return the list of items
     * @throws IOException if an I/O error occurs
     */
    public List<JavaItem> scanDirectory(File directoryPath) throws IOException {
        final List<JavaItem> javaItems = new ArrayList<>(32);
        try (Stream<Path> walk = Files.walk(directoryPath.toPath())) {
            walk.filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), javaItems));
        }
        return javaItems;
    }

    /**
     * Parses the given file and adds the parsed items to the list.
     *
     * @param file      the file to parse
     * @param javaItems the list of items to add to
     */
    private void parseFile(File file, List<JavaItem> javaItems) {
        try {
            final ClassVisitor cv = new ClassVisitor();
            javaItems.addAll(cv.run(file));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Builder class for the Java2CSV class.
     */
    public static class Builder {

        /**
         * Path of the directory that contains the Java files to be converted.
         */
        private String inputDirectoryPath;

        /**
         * Name of the file where the output of the conversion will be stored.
         */
        private String outputFile;

        private Builder() {
        }

        /**
         * Sets the path of the directory that contains the Java files to be converted.
         *
         * @param inputDirectoryPath the path of the directory.
         * @return the Builder instance with the updated input directory path.
         */
        public Builder inputDirectoryPath(String inputDirectoryPath) {
            this.inputDirectoryPath = inputDirectoryPath;
            return this;
        }

        /**
         * Sets the name of the output file where the conversion result will be stored.
         *
         * @param outputFile the name of the output file.
         * @return the Builder instance with the updated output file name.
         */
        public Builder outputFile(String outputFile) {
            this.outputFile = outputFile;
            return this;
        }

        /**
         * Returns a Java2CSV object built with the parameters set in this Builder instance.
         *
         * @return a new Java2CSV instance.
         */
        public Java2CSV build() {
            return new Java2CSV(this.inputDirectoryPath, this.outputFile);
        }
    }
}"
"Builder","class","com.cloudurable.java2csv.Java2CSV.Builder","public static class Builder ","/**
 * Builder class for the Java2CSV class.
 */
","com.cloudurable.java2csv.Java2CSV","import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.opencsv.CSVWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.nio.file.Files;

import java.nio.file.Path;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.regex.Pattern;

import java.util.stream.Collectors;

import java.util.stream.Stream;
","public static class Builder {

    /**
     * Path of the directory that contains the Java files to be converted.
     */
    private String inputDirectoryPath;

    /**
     * Name of the file where the output of the conversion will be stored.
     */
    private String outputFile;

    private Builder() {
    }

    /**
     * Sets the path of the directory that contains the Java files to be converted.
     *
     * @param inputDirectoryPath the path of the directory.
     * @return the Builder instance with the updated input directory path.
     */
    public Builder inputDirectoryPath(String inputDirectoryPath) {
        this.inputDirectoryPath = inputDirectoryPath;
        return this;
    }

    /**
     * Sets the name of the output file where the conversion result will be stored.
     *
     * @param outputFile the name of the output file.
     * @return the Builder instance with the updated output file name.
     */
    public Builder outputFile(String outputFile) {
        this.outputFile = outputFile;
        return this;
    }

    /**
     * Returns a Java2CSV object built with the parameters set in this Builder instance.
     *
     * @return a new Java2CSV instance.
     */
    public Java2CSV build() {
        return new Java2CSV(this.inputDirectoryPath, this.outputFile);
    }
}"
"builder","method","com.cloudurable.java2csv.Java2CSV.builder","public static Builder builder() ","/**
 * Returns a new instance of the Builder class to configure a Java2CSV object.
 *
 * @return a new Builder instance.
 */
","com.cloudurable.java2csv.Java2CSV","","public static Builder builder() {
    return new Builder();
}"
"run","method","com.cloudurable.java2csv.Java2CSV.run","public void run() throws IOException ","","com.cloudurable.java2csv.Java2CSV","","public void run() throws IOException {
    File dir = new File(inputDirectoryPath).getCanonicalFile();
    if (dir.exists() && dir.isDirectory()) {
        List<JavaItem> javaItems = scanDirectory(dir);
        List<List<String>> lines = javaItems.stream().map(JavaItem::row).collect(Collectors.toList());
        try (CSVWriter writer = new CSVWriter(new FileWriter(outputFile))) {
            writer.writeNext(JavaItem.headers().toArray(new String[0]));
            for (List<String> line : lines) {
                writer.writeNext(line.toArray(new String[0]));
            }
        }
    } else {
        throw new IllegalStateException(String.format(""Directory does not exist %s or is not a directory"", dir));
    }
}"
"scanDirectory","method","com.cloudurable.java2csv.Java2CSV.scanDirectory","public List<JavaItem> scanDirectory(File directoryPath) throws IOException ","/**
 * Scans the given directory and returns a list of items representing the Java code.
 *
 * @param directoryPath the directory path
 * @return the list of items
 * @throws IOException if an I/O error occurs
 */
","com.cloudurable.java2csv.Java2CSV","","public List<JavaItem> scanDirectory(File directoryPath) throws IOException {
    final List<JavaItem> javaItems = new ArrayList<>(32);
    try (Stream<Path> walk = Files.walk(directoryPath.toPath())) {
        walk.filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), javaItems));
    }
    return javaItems;
}"
"parseFile","method","com.cloudurable.java2csv.Java2CSV.parseFile","private void parseFile(File file, List<JavaItem> javaItems) ","/**
 * Parses the given file and adds the parsed items to the list.
 *
 * @param file      the file to parse
 * @param javaItems the list of items to add to
 */
","com.cloudurable.java2csv.Java2CSV","","private void parseFile(File file, List<JavaItem> javaItems) {
    try {
        final ClassVisitor cv = new ClassVisitor();
        javaItems.addAll(cv.run(file));
    } catch (IOException e) {
        e.printStackTrace();
    }
}"
"inputDirectoryPath","field","com.cloudurable.java2csv.Java2CSV.inputDirectoryPath","private final String inputDirectoryPath;","/**
 * Path of the directory that contains the Java files to be converted.
 */
","com.cloudurable.java2csv.Java2CSV","",""
"outputFile","field","com.cloudurable.java2csv.Java2CSV.outputFile","private final String outputFile;","/**
 * Name of the file where the output of the conversion will be stored.
 */
","com.cloudurable.java2csv.Java2CSV","",""
"JavaItemType","enum","com.cloudurable.java2csv.JavaItemType","public enum JavaItemType ","/**
 * Enum representing different types of Java items, such as classes, interfaces, enums, methods, and fields.
 */
","","","public enum JavaItemType {

    /**
     * Class defines a class .
     */
    CLASS,
    /**
     * Interface defines a class .
     */
    INTERFACE,
    ENUM,
    METHOD,
    FIELD
}"
"ClassVisitor","class","com.cloudurable.java2csv.ClassVisitor","class ClassVisitor extends VoidVisitorAdapter<Void> ","/**
 * Visitor for visiting classes, interfaces, and enums.
 */
","","import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.Node;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithName;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import java.io.File;

import java.io.FileNotFoundException;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.regex.Matcher;

import java.util.regex.Pattern;

import java.util.stream.Collectors;
","class ClassVisitor extends VoidVisitorAdapter<Void> {

    private static final Pattern JAVA_DOC_REGEX = Pattern.compile(""^/\\*\\*.*?\\*/\\s*"", Pattern.DOTALL);

    private final List<JavaItem> javaItems;

    private CompilationUnit compilationUnit;

    public ClassVisitor() {
        this.javaItems = new ArrayList<>(32);
    }

    /**
     * Returns a small definition of the given text by keeping only the first line and replacing the rest with a placeholder.
     *
     * @param text the input text
     * @return the small definition
     */
    private static String getSmallDefinition(String text) {
        // Split the string into an array of lines
        String[] lines = text.split(""\\{"");
        return lines[0];
    }

    /**
     * Returns the definition of the given object's body with a maximum number of lines.
     * If the number of lines exceeds the maximum, an empty string is returned.
     *
     * @param n           the object
     * @param numLinesMax the maximum number of lines
     * @return the body definition
     */
    private static String getBodyDefinition(Object n, int numLinesMax) {
        String[] lines = n.toString().split(""\n"");
        if (lines.length > numLinesMax) {
            int count = 0;
            StringBuilder builder = new StringBuilder(lines.length * 20);
            for (String line : lines) {
                builder.append(line).append('\n');
                count++;
                if (count >= 200) {
                    break;
                }
            }
            return builder.toString();
        } else {
            return n.toString();
        }
    }

    /**
     * Extracts the Javadoc comment and method code from the given code.
     *
     * @param code the input code
     * @return an array containing the Javadoc comment and method code
     */
    public String[] extractJavaDoc(String code) {
        // Define the regular expression pattern to match Javadoc comments
        Matcher matcher = JAVA_DOC_REGEX.matcher(code);
        if (matcher.find()) {
            // Extract the Javadoc comment
            String javadoc = matcher.group();
            // Extract the method code
            String methodCode = code.substring(matcher.end());
            return new String[] { javadoc, methodCode };
        } else {
            // No Javadoc found
            return new String[] { """", code };
        }
    }

    @Override
    public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
        if (!cls.isInnerClass() && !cls.isStatic()) {
            visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), cls);
        }
        super.visit(cls, arg);
    }

    /**
     * Extracts the field name from a FieldDeclaration.
     *
     * @param field the input field
     * @return the field name
     */
    private String fieldName(FieldDeclaration field) {
        final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
        return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
    }

    /**
     * Visits a class or interface.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param cls         the class or interface
     */
    public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
        final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        final JavaItem javaItem = JavaItem.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
        javaItems.add(javaItem);
        cls.getChildNodes().stream().filter(n -> n instanceof ClassOrInterfaceDeclaration).forEach(clsInner -> visitClassType(packageName, importBody, javaItem, (ClassOrInterfaceDeclaration) clsInner));
        cls.getMethods().forEach(method -> visitMethod(javaItem, method));
        cls.getFields().forEach(field -> visitField(javaItem, field));
    }

    /**
     * Visits a class or interface type.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param parent      the parent item
     * @param cls         the class or interface type
     */
    private void visitClassType(String packageName, String importBody, JavaItem parent, ClassOrInterfaceDeclaration cls) {
        final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        JavaItem javaItem = JavaItem.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
        javaItems.add(javaItem);
    }

    /**
     * Visits a field.
     *
     * @param parent the parent item
     * @param field  the field
     */
    private void visitField(JavaItem parent, FieldDeclaration field) {
        final String[] parts = extractJavaDoc(field.toString());
        final String javaDoc = parts[0];
        final String code = parts[1];
        JavaItem javaItem = JavaItem.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(code).javadoc(javaDoc).parent(parent).build();
        javaItems.add(javaItem);
    }

    /**
     * Visits a method.
     *
     * @param parent the parent item
     * @param method the method
     */
    public void visitMethod(JavaItem parent, final MethodDeclaration method) {
        String[] parts = extractJavaDoc(getBodyDefinition(method, 500));
        final String javaDoc = parts[0];
        final String code = parts[1];
        JavaItem javaItem = JavaItem.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
        javaItems.add(javaItem);
        //System.out.println(item);
    }

    @Override
    public void visit(EnumDeclaration n, Void arg) {
        visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), n);
        super.visit(n, arg);
    }

    /**
     * Visits an enum.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param enumD       the enum
     */
    private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
        String[] parts = extractJavaDoc(getBodyDefinition(enumD, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        JavaItem javaItem = JavaItem.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
        javaItems.add(javaItem);
        enumD.getMethods().forEach(method -> visitMethod(javaItem, method));
        enumD.getFields().forEach(field -> visitField(javaItem, field));
    }

    public List<JavaItem> run(File file) throws FileNotFoundException {
        compilationUnit = StaticJavaParser.parse(file);
        compilationUnit.accept(this, null);
        return this.javaItems;
    }
}"
"getSmallDefinition","method","com.cloudurable.java2csv.ClassVisitor.getSmallDefinition","private static String getSmallDefinition(String text) ","/**
 * Returns a small definition of the given text by keeping only the first line and replacing the rest with a placeholder.
 *
 * @param text the input text
 * @return the small definition
 */
","com.cloudurable.java2csv.ClassVisitor","","private static String getSmallDefinition(String text) {
    // Split the string into an array of lines
    String[] lines = text.split(""\\{"");
    return lines[0];
}"
"getBodyDefinition","method","com.cloudurable.java2csv.ClassVisitor.getBodyDefinition","private static String getBodyDefinition(Object n, int numLinesMax) ","/**
 * Returns the definition of the given object's body with a maximum number of lines.
 * If the number of lines exceeds the maximum, an empty string is returned.
 *
 * @param n           the object
 * @param numLinesMax the maximum number of lines
 * @return the body definition
 */
","com.cloudurable.java2csv.ClassVisitor","","private static String getBodyDefinition(Object n, int numLinesMax) {
    String[] lines = n.toString().split(""\n"");
    if (lines.length > numLinesMax) {
        int count = 0;
        StringBuilder builder = new StringBuilder(lines.length * 20);
        for (String line : lines) {
            builder.append(line).append('\n');
            count++;
            if (count >= 200) {
                break;
            }
        }
        return builder.toString();
    } else {
        return n.toString();
    }
}"
"extractJavaDoc","method","com.cloudurable.java2csv.ClassVisitor.extractJavaDoc","public String[] extractJavaDoc(String code) ","/**
 * Extracts the Javadoc comment and method code from the given code.
 *
 * @param code the input code
 * @return an array containing the Javadoc comment and method code
 */
","com.cloudurable.java2csv.ClassVisitor","","public String[] extractJavaDoc(String code) {
    // Define the regular expression pattern to match Javadoc comments
    Matcher matcher = JAVA_DOC_REGEX.matcher(code);
    if (matcher.find()) {
        // Extract the Javadoc comment
        String javadoc = matcher.group();
        // Extract the method code
        String methodCode = code.substring(matcher.end());
        return new String[] { javadoc, methodCode };
    } else {
        // No Javadoc found
        return new String[] { """", code };
    }
}"
"visit","method","com.cloudurable.java2csv.ClassVisitor.visit","@Override
public void visit(ClassOrInterfaceDeclaration cls, Void arg) ","","com.cloudurable.java2csv.ClassVisitor","","@Override
public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
    if (!cls.isInnerClass() && !cls.isStatic()) {
        visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), cls);
    }
    super.visit(cls, arg);
}"
"fieldName","method","com.cloudurable.java2csv.ClassVisitor.fieldName","private String fieldName(FieldDeclaration field) ","/**
 * Extracts the field name from a FieldDeclaration.
 *
 * @param field the input field
 * @return the field name
 */
","com.cloudurable.java2csv.ClassVisitor","","private String fieldName(FieldDeclaration field) {
    final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
    return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
}"
"visitClass","method","com.cloudurable.java2csv.ClassVisitor.visitClass","public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) ","/**
 * Visits a class or interface.
 *
 * @param packageName the package name
 * @param importBody  the import statements
 * @param cls         the class or interface
 */
","com.cloudurable.java2csv.ClassVisitor","","public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
    final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
    final String javaDoc = parts[0];
    final String code = parts[1];
    final JavaItem javaItem = JavaItem.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
    javaItems.add(javaItem);
    cls.getChildNodes().stream().filter(n -> n instanceof ClassOrInterfaceDeclaration).forEach(clsInner -> visitClassType(packageName, importBody, javaItem, (ClassOrInterfaceDeclaration) clsInner));
    cls.getMethods().forEach(method -> visitMethod(javaItem, method));
    cls.getFields().forEach(field -> visitField(javaItem, field));
}"
"visitClassType","method","com.cloudurable.java2csv.ClassVisitor.visitClassType","private void visitClassType(String packageName, String importBody, JavaItem parent, ClassOrInterfaceDeclaration cls) ","/**
 * Visits a class or interface type.
 *
 * @param packageName the package name
 * @param importBody  the import statements
 * @param parent      the parent item
 * @param cls         the class or interface type
 */
","com.cloudurable.java2csv.ClassVisitor","","private void visitClassType(String packageName, String importBody, JavaItem parent, ClassOrInterfaceDeclaration cls) {
    final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
    final String javaDoc = parts[0];
    final String code = parts[1];
    JavaItem javaItem = JavaItem.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
    javaItems.add(javaItem);
}"
"visitField","method","com.cloudurable.java2csv.ClassVisitor.visitField","private void visitField(JavaItem parent, FieldDeclaration field) ","/**
 * Visits a field.
 *
 * @param parent the parent item
 * @param field  the field
 */
","com.cloudurable.java2csv.ClassVisitor","","private void visitField(JavaItem parent, FieldDeclaration field) {
    final String[] parts = extractJavaDoc(field.toString());
    final String javaDoc = parts[0];
    final String code = parts[1];
    JavaItem javaItem = JavaItem.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(code).javadoc(javaDoc).parent(parent).build();
    javaItems.add(javaItem);
}"
"visitMethod","method","com.cloudurable.java2csv.ClassVisitor.visitMethod","public void visitMethod(JavaItem parent, final MethodDeclaration method) ","/**
 * Visits a method.
 *
 * @param parent the parent item
 * @param method the method
 */
","com.cloudurable.java2csv.ClassVisitor","","public void visitMethod(JavaItem parent, final MethodDeclaration method) {
    String[] parts = extractJavaDoc(getBodyDefinition(method, 500));
    final String javaDoc = parts[0];
    final String code = parts[1];
    JavaItem javaItem = JavaItem.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
    javaItems.add(javaItem);
    //System.out.println(item);
}"
"visit","method","com.cloudurable.java2csv.ClassVisitor.visit","@Override
public void visit(EnumDeclaration n, Void arg) ","","com.cloudurable.java2csv.ClassVisitor","","@Override
public void visit(EnumDeclaration n, Void arg) {
    visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), n);
    super.visit(n, arg);
}"
"visitEnum","method","com.cloudurable.java2csv.ClassVisitor.visitEnum","private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) ","/**
 * Visits an enum.
 *
 * @param packageName the package name
 * @param importBody  the import statements
 * @param enumD       the enum
 */
","com.cloudurable.java2csv.ClassVisitor","","private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
    String[] parts = extractJavaDoc(getBodyDefinition(enumD, 200));
    final String javaDoc = parts[0];
    final String code = parts[1];
    JavaItem javaItem = JavaItem.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
    javaItems.add(javaItem);
    enumD.getMethods().forEach(method -> visitMethod(javaItem, method));
    enumD.getFields().forEach(field -> visitField(javaItem, field));
}"
"run","method","com.cloudurable.java2csv.ClassVisitor.run","public List<JavaItem> run(File file) throws FileNotFoundException ","","com.cloudurable.java2csv.ClassVisitor","","public List<JavaItem> run(File file) throws FileNotFoundException {
    compilationUnit = StaticJavaParser.parse(file);
    compilationUnit.accept(this, null);
    return this.javaItems;
}"
"JAVA_DOC_REGEX","field","com.cloudurable.java2csv.ClassVisitor.JAVA_DOC_REGEX","private static final Pattern JAVA_DOC_REGEX = Pattern.compile(""^/\\*\\*.*?\\*/\\s*"", Pattern.DOTALL);","","com.cloudurable.java2csv.ClassVisitor","",""
"javaItems","field","com.cloudurable.java2csv.ClassVisitor.javaItems","private final List<JavaItem> javaItems;","","com.cloudurable.java2csv.ClassVisitor","",""
"compilationUnit","field","com.cloudurable.java2csv.ClassVisitor.compilationUnit","private CompilationUnit compilationUnit;","","com.cloudurable.java2csv.ClassVisitor","",""
"Main","class","com.cloudurable.java2csv.Main","public class Main ","","","import java.io.IOException;
","public class Main {

    /**
     * Entry point of the program.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            final String directoryPath = args.length > 0 ? args[0] : ""."";
            final String outputFile = args.length > 1 ? args[1] : ""output.csv"";
            Java2CSV.builder().inputDirectoryPath(directoryPath).outputFile(outputFile).build().run();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}"
"main","method","com.cloudurable.java2csv.Main.main","public static void main(String[] args) ","/**
 * Entry point of the program.
 *
 * @param args the command line arguments
 */
","com.cloudurable.java2csv.Main","","public static void main(String[] args) {
    try {
        final String directoryPath = args.length > 0 ? args[0] : ""."";
        final String outputFile = args.length > 1 ? args[1] : ""output.csv"";
        Java2CSV.builder().inputDirectoryPath(directoryPath).outputFile(outputFile).build().run();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}"
"JavaItem","class","com.cloudurable.java2csv.JavaItem","public class JavaItem ","/**
 * Represents an item in Java code, such as a class, method, or field.
 */
","","import java.util.List;
","public class JavaItem {

    /**
     * Import body, the imports for the class.
     */
    private final String importBody;

    /**
     *  Code body, the whole code for the item.
     */
    private final String body;

    /**
     *  JavaDoc, the javadoc for the item.
     */
    private final String javadoc;

    private final String name;

    private final String simpleName;

    private final String definition;

    private final JavaItem parent;

    private final JavaItemType type;

    /**
     * Constructs a new Item.
     *
     * @param importBody  the import statements associated with the item
     * @param body        the source code body of the item
     * @param javadoc     the Javadoc documentation of the item
     * @param name        the fully qualified name of the item
     * @param simpleName  the simple name of the item
     * @param definition  the definition of the item
     * @param parent      the parent item of the current item (e.g., for inner classes)
     * @param type        the type of the item (e.g., class, method, field)
     */
    public JavaItem(String importBody, String body, String javadoc, String name, String simpleName, String definition, JavaItem parent, JavaItemType type) {
        this.importBody = orEmptyString(importBody);
        this.body = orEmptyString(body);
        this.javadoc = orEmptyString(javadoc);
        this.name = orEmptyString(name);
        this.simpleName = orEmptyString(simpleName);
        this.definition = orEmptyString(definition);
        this.parent = parent;
        this.type = type;
    }

    /**
     * Returns the column headers for the CSV representation of an Item.
     *
     * @return the column headers
     */
    public static List<String> headers() {
        return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
    }

    /**
     * Returns a builder to construct an Item.
     *
     * @return the Item builder
     */
    public static Builder builder() {
        return new Builder();
    }

    private String orEmptyString(String part) {
        return part == null ? """" : part;
    }

    /**
     * Returns a row representing the Item for the CSV output.
     *
     * @return the row representing the Item
     */
    public List<String> row() {
        return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
    }

    /**
     * Returns the import statements associated with the item.
     *
     * @return the import statements
     */
    public String getImportBody() {
        return importBody;
    }

    /**
     * Returns the source code body of the item.
     *
     * @return the source code body
     */
    public String getBody() {
        return body;
    }

    /**
     * Returns the Javadoc documentation of the item.
     *
     * @return the Javadoc documentation
     */
    public String getJavadoc() {
        return javadoc;
    }

    /**
     * Returns the fully qualified name of the item.
     *
     * @return the fully qualified name
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the definition of the item.
     *
     * @return the definition
     */
    public String getDefinition() {
        return definition;
    }

    /**
     * Returns the parent item of the current item.
     *
     * @return the parent item
     */
    public JavaItem getParent() {
        return parent;
    }

    /**
     * Returns the type of the item.
     *
     * @return the item type
     */
    public JavaItemType getType() {
        return type;
    }

    @Override
    public String toString() {
        return ""Item{"" + ""simpleName='"" + simpleName + '\'' + "", type="" + type + "", name='"" + name + '\'' + "", definition='"" + definition + '\'' + "", parent="" + parent + "", importBody='"" + importBody + '\'' + "", javadoc='"" + javadoc + '\'' + "", body='"" + body + '\'' + '}';
    }

    /**
     * Builder class for constructing an Item.
     */
    public static class Builder {

        private String body;

        private String javadoc;

        private String name;

        private String definition;

        private JavaItem parent;

        private String importBody;

        private String simpleName;

        private JavaItemType type;

        private Builder() {
        }

        public Builder simpleName(String simpleName) {
            this.simpleName = simpleName;
            return this;
        }

        public Builder type(JavaItemType type) {
            this.type = type;
            return this;
        }

        public Builder importBody(String importBody) {
            this.importBody = importBody;
            return this;
        }

        public Builder body(String body) {
            this.body = body;
            return this;
        }

        public Builder javadoc(String javadoc) {
            this.javadoc = javadoc;
            return this;
        }
"
"Builder","class","com.cloudurable.java2csv.JavaItem.Builder","public static class Builder ","/**
 * Builder class for constructing an Item.
 */
","com.cloudurable.java2csv.JavaItem","import java.util.List;
","public static class Builder {

    private String body;

    private String javadoc;

    private String name;

    private String definition;

    private JavaItem parent;

    private String importBody;

    private String simpleName;

    private JavaItemType type;

    private Builder() {
    }

    public Builder simpleName(String simpleName) {
        this.simpleName = simpleName;
        return this;
    }

    public Builder type(JavaItemType type) {
        this.type = type;
        return this;
    }

    public Builder importBody(String importBody) {
        this.importBody = importBody;
        return this;
    }

    public Builder body(String body) {
        this.body = body;
        return this;
    }

    public Builder javadoc(String javadoc) {
        this.javadoc = javadoc;
        return this;
    }

    public Builder name(String name) {
        this.name = name;
        return this;
    }

    public Builder definition(String definition) {
        this.definition = definition;
        return this;
    }

    public Builder parent(JavaItem parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Builds and returns the Item.
     *
     * @return the constructed Item
     */
    public JavaItem build() {
        return new JavaItem(importBody, body, javadoc, name, simpleName, definition, parent, type);
    }
}"
"headers","method","com.cloudurable.java2csv.JavaItem.headers","public static List<String> headers() ","/**
 * Returns the column headers for the CSV representation of an Item.
 *
 * @return the column headers
 */
","com.cloudurable.java2csv.JavaItem","","public static List<String> headers() {
    return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
}"
"builder","method","com.cloudurable.java2csv.JavaItem.builder","public static Builder builder() ","/**
 * Returns a builder to construct an Item.
 *
 * @return the Item builder
 */
","com.cloudurable.java2csv.JavaItem","","public static Builder builder() {
    return new Builder();
}"
"orEmptyString","method","com.cloudurable.java2csv.JavaItem.orEmptyString","private String orEmptyString(String part) ","","com.cloudurable.java2csv.JavaItem","","private String orEmptyString(String part) {
    return part == null ? """" : part;
}"
"row","method","com.cloudurable.java2csv.JavaItem.row","public List<String> row() ","/**
 * Returns a row representing the Item for the CSV output.
 *
 * @return the row representing the Item
 */
","com.cloudurable.java2csv.JavaItem","","public List<String> row() {
    return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
}"
"getImportBody","method","com.cloudurable.java2csv.JavaItem.getImportBody","public String getImportBody() ","/**
 * Returns the import statements associated with the item.
 *
 * @return the import statements
 */
","com.cloudurable.java2csv.JavaItem","","public String getImportBody() {
    return importBody;
}"
"getBody","method","com.cloudurable.java2csv.JavaItem.getBody","public String getBody() ","/**
 * Returns the source code body of the item.
 *
 * @return the source code body
 */
","com.cloudurable.java2csv.JavaItem","","public String getBody() {
    return body;
}"
"getJavadoc","method","com.cloudurable.java2csv.JavaItem.getJavadoc","public String getJavadoc() ","/**
 * Returns the Javadoc documentation of the item.
 *
 * @return the Javadoc documentation
 */
","com.cloudurable.java2csv.JavaItem","","public String getJavadoc() {
    return javadoc;
}"
"getName","method","com.cloudurable.java2csv.JavaItem.getName","public String getName() ","/**
 * Returns the fully qualified name of the item.
 *
 * @return the fully qualified name
 */
","com.cloudurable.java2csv.JavaItem","","public String getName() {
    return name;
}"
"getDefinition","method","com.cloudurable.java2csv.JavaItem.getDefinition","public String getDefinition() ","/**
 * Returns the definition of the item.
 *
 * @return the definition
 */
","com.cloudurable.java2csv.JavaItem","","public String getDefinition() {
    return definition;
}"
"getParent","method","com.cloudurable.java2csv.JavaItem.getParent","public JavaItem getParent() ","/**
 * Returns the parent item of the current item.
 *
 * @return the parent item
 */
","com.cloudurable.java2csv.JavaItem","","public JavaItem getParent() {
    return parent;
}"
"getType","method","com.cloudurable.java2csv.JavaItem.getType","public JavaItemType getType() ","/**
 * Returns the type of the item.
 *
 * @return the item type
 */
","com.cloudurable.java2csv.JavaItem","","public JavaItemType getType() {
    return type;
}"
"toString","method","com.cloudurable.java2csv.JavaItem.toString","@Override
public String toString() ","","com.cloudurable.java2csv.JavaItem","","@Override
public String toString() {
    return ""Item{"" + ""simpleName='"" + simpleName + '\'' + "", type="" + type + "", name='"" + name + '\'' + "", definition='"" + definition + '\'' + "", parent="" + parent + "", importBody='"" + importBody + '\'' + "", javadoc='"" + javadoc + '\'' + "", body='"" + body + '\'' + '}';
}"
"importBody","field","com.cloudurable.java2csv.JavaItem.importBody","private final String importBody;","/**
 * Import body, the imports for the class.
 */
","com.cloudurable.java2csv.JavaItem","",""
"body","field","com.cloudurable.java2csv.JavaItem.body","private final String body;","/**
 *  Code body, the whole code for the item.
 */
","com.cloudurable.java2csv.JavaItem","",""
"javadoc","field","com.cloudurable.java2csv.JavaItem.javadoc","private final String javadoc;","/**
 *  JavaDoc, the javadoc for the item.
 */
","com.cloudurable.java2csv.JavaItem","",""
"name","field","com.cloudurable.java2csv.JavaItem.name","private final String name;","","com.cloudurable.java2csv.JavaItem","",""
"simpleName","field","com.cloudurable.java2csv.JavaItem.simpleName","private final String simpleName;","","com.cloudurable.java2csv.JavaItem","",""
"definition","field","com.cloudurable.java2csv.JavaItem.definition","private final String definition;","","com.cloudurable.java2csv.JavaItem","",""
"parent","field","com.cloudurable.java2csv.JavaItem.parent","private final JavaItem parent;","","com.cloudurable.java2csv.JavaItem","",""
"type","field","com.cloudurable.java2csv.JavaItem.type","private final JavaItemType type;","","com.cloudurable.java2csv.JavaItem","",""
