"Name","Type","FullName","Definition","JavaDoc","Parent","Imports","Body"
"Java2CSV","class","com.cloudurable.java2csv.Java2CSV","/**
 * Parse Java files and turn them into CSV files.
 */
public class Java2CSV { /* the rest ... */ }","Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Parse Java files and turn them into CSV files.'}]}, blockTags=[]}","","import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.Node;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithName;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.github.javaparser.ast.type.ClassOrInterfaceType;

import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import com.opencsv.CSVWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.nio.file.Files;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.stream.Collectors;
","/**
 * Parse Java files and turn them into CSV files.
 */
public class Java2CSV {

    public final static String MY_FIELD = ""BOO"";

    /**
     * Extract field name from FieldDeclaration.
     *
     * @param field input field
     */
    private static String fieldName(FieldDeclaration field) {
        final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
        return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
    }

    private static String getSmallDefinition(String text) {
        // Split the string into an array of lines
        String[] lines = text.split(""\\{"");
        return lines[0] + ""{ /* the rest ... */ }"";
    }

    private static String getBodyDefinition(Object n, int numLinesMax, String alternativeString) {
        String[] lines = n.toString().split(""\n"");
        if (lines.length > numLinesMax) {
            return alternativeString;
        } else {
            return n.toString();
        }
    }

    public static void main(String[] args) throws IOException {
        System.out.println(new File(""."").getCanonicalFile());
        try {
            String directoryPath = args.length > 0 ? args[0] : ""."";
            String output = args.length > 1 ? args[1] : ""output.csv"";
            File dir = new File(directoryPath).getCanonicalFile();
            if (dir.exists() && dir.isDirectory()) {
                List<Item> items = scanDirectory(dir);
                List<List<String>> lines = items.stream().map(Item::row).collect(Collectors.toList());
                try (CSVWriter writer = new CSVWriter(new FileWriter(output))) {
                    writer.writeNext(Item.headers().toArray(new String[0]));
                    for (List<String> line : lines) {
                        writer.writeNext(line.toArray(new String[0]));
                    }
                }
            } else {
                System.out.printf(""Directory does not exist %s or is not a directory"", dir);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static List<Item> scanDirectory(File directoryPath) throws IOException {
        List<Item> items = new ArrayList<>(32);
        Files.walk(directoryPath.toPath()).filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), items));
        return items;
    }

    private static void parseFile(File file, List<Item> items) {
        System.out.println(file);
        try {
            CompilationUnit compilationUnit = StaticJavaParser.parse(file);
            compilationUnit.accept(new ClassVisitor(compilationUnit, items), null);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class ClassVisitor extends VoidVisitorAdapter<Void> {

        private final CompilationUnit compilationUnit;

        private final List<Item> items;

        public ClassVisitor(CompilationUnit compilationUnit, List<Item> items) {
            this.compilationUnit = compilationUnit;
            this.items = items;
        }

        @Override
        public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
            if (!cls.isInnerClass()) {
                visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), cls);
            }
            super.visit(cls, arg);
        }

        public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
            Item item = Item.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc(cls.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(cls, 200, """")).build();
            items.add(item);
            System.out.println(item);
            cls.getImplementedTypes().stream().filter(typ -> typ.isClassOrInterfaceType()).forEach(clsInner -> visitClassType(packageName, importBody, item, clsInner.asClassOrInterfaceType()));
            cls.getMethods().forEach(method -> visitMethod(item, method));
            cls.getFields().forEach(field -> visitField(item, field));
        }

        private void visitClassType(String packageName, String importBody, Item parent, ClassOrInterfaceType cls) {
            Item item = Item.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc("""").parent(parent).body(getBodyDefinition(cls, 200, """")).build();
            items.add(item);
            System.out.println(item);
        }

        private void visitField(Item parent, FieldDeclaration field) {
            Item item = Item.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(field.toString()).javadoc(field.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
            items.add(item);
            System.out.println(item);
        }

        public void visitMethod(Item parent, final MethodDeclaration method) {
            Item item = Item.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(method.toString()).javadoc(method.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
            items.add(item);
            System.out.println(item);
        }

        @Override
        public void visit(EnumDeclaration n, Void arg) {
            visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), n);
            super.visit(n, arg);
        }

        private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
            Item item = Item.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(enumD.toString())).javadoc(enumD.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(enumD, 200, """")).build();
            items.add(item);
            System.out.println(item);
            enumD.getMethods().forEach(method -> visitMethod(item, method));
            enumD.getFields().forEach(field -> visitField(item, field));
        }
    }
}"
"fieldName","method","com.cloudurable.java2csv.Java2CSV.fieldName","/**
 * Extract field name from FieldDeclaration.
 *
 * @param field input field
 */
private static String fieldName(FieldDeclaration field) {
    final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
    return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
}","Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='Extract field name from FieldDeclaration.'}]}, blockTags=[JavadocBlockTag{type=PARAM, content='JavadocDescription{elements=[JavadocSnippet{text='input field'}]}', name=Optional[field]}]}","com.cloudurable.java2csv.Java2CSV","",""
"getSmallDefinition","method","com.cloudurable.java2csv.Java2CSV.getSmallDefinition","private static String getSmallDefinition(String text) {
    // Split the string into an array of lines
    String[] lines = text.split(""\\{"");
    return lines[0] + ""{ /* the rest ... */ }"";
}","","com.cloudurable.java2csv.Java2CSV","",""
"getBodyDefinition","method","com.cloudurable.java2csv.Java2CSV.getBodyDefinition","private static String getBodyDefinition(Object n, int numLinesMax, String alternativeString) {
    String[] lines = n.toString().split(""\n"");
    if (lines.length > numLinesMax) {
        return alternativeString;
    } else {
        return n.toString();
    }
}","","com.cloudurable.java2csv.Java2CSV","",""
"main","method","com.cloudurable.java2csv.Java2CSV.main","public static void main(String[] args) throws IOException {
    System.out.println(new File(""."").getCanonicalFile());
    try {
        String directoryPath = args.length > 0 ? args[0] : ""."";
        String output = args.length > 1 ? args[1] : ""output.csv"";
        File dir = new File(directoryPath).getCanonicalFile();
        if (dir.exists() && dir.isDirectory()) {
            List<Item> items = scanDirectory(dir);
            List<List<String>> lines = items.stream().map(Item::row).collect(Collectors.toList());
            try (CSVWriter writer = new CSVWriter(new FileWriter(output))) {
                writer.writeNext(Item.headers().toArray(new String[0]));
                for (List<String> line : lines) {
                    writer.writeNext(line.toArray(new String[0]));
                }
            }
        } else {
            System.out.printf(""Directory does not exist %s or is not a directory"", dir);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}","","com.cloudurable.java2csv.Java2CSV","",""
"scanDirectory","method","com.cloudurable.java2csv.Java2CSV.scanDirectory","private static List<Item> scanDirectory(File directoryPath) throws IOException {
    List<Item> items = new ArrayList<>(32);
    Files.walk(directoryPath.toPath()).filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), items));
    return items;
}","","com.cloudurable.java2csv.Java2CSV","",""
"parseFile","method","com.cloudurable.java2csv.Java2CSV.parseFile","private static void parseFile(File file, List<Item> items) {
    System.out.println(file);
    try {
        CompilationUnit compilationUnit = StaticJavaParser.parse(file);
        compilationUnit.accept(new ClassVisitor(compilationUnit, items), null);
    } catch (IOException e) {
        e.printStackTrace();
    }
}","","com.cloudurable.java2csv.Java2CSV","",""
"MY_FIELD","field","com.cloudurable.java2csv.Java2CSV.MY_FIELD","public final static String MY_FIELD = ""BOO"";","","com.cloudurable.java2csv.Java2CSV","",""
"ClassVisitor","class","com.cloudurable.java2csv.ClassVisitor","private static class ClassVisitor extends VoidVisitorAdapter<Void> { /* the rest ... */ }","","","import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.Node;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithName;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.github.javaparser.ast.type.ClassOrInterfaceType;

import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import com.opencsv.CSVWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.nio.file.Files;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.stream.Collectors;
","private static class ClassVisitor extends VoidVisitorAdapter<Void> {

    private final CompilationUnit compilationUnit;

    private final List<Item> items;

    public ClassVisitor(CompilationUnit compilationUnit, List<Item> items) {
        this.compilationUnit = compilationUnit;
        this.items = items;
    }

    @Override
    public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
        if (!cls.isInnerClass()) {
            visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), cls);
        }
        super.visit(cls, arg);
    }

    public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
        Item item = Item.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc(cls.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(cls, 200, """")).build();
        items.add(item);
        System.out.println(item);
        cls.getImplementedTypes().stream().filter(typ -> typ.isClassOrInterfaceType()).forEach(clsInner -> visitClassType(packageName, importBody, item, clsInner.asClassOrInterfaceType()));
        cls.getMethods().forEach(method -> visitMethod(item, method));
        cls.getFields().forEach(field -> visitField(item, field));
    }

    private void visitClassType(String packageName, String importBody, Item parent, ClassOrInterfaceType cls) {
        Item item = Item.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc("""").parent(parent).body(getBodyDefinition(cls, 200, """")).build();
        items.add(item);
        System.out.println(item);
    }

    private void visitField(Item parent, FieldDeclaration field) {
        Item item = Item.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(field.toString()).javadoc(field.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
        items.add(item);
        System.out.println(item);
    }

    public void visitMethod(Item parent, final MethodDeclaration method) {
        Item item = Item.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(method.toString()).javadoc(method.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
        items.add(item);
        System.out.println(item);
    }

    @Override
    public void visit(EnumDeclaration n, Void arg) {
        visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), n);
        super.visit(n, arg);
    }

    private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
        Item item = Item.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(enumD.toString())).javadoc(enumD.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(enumD, 200, """")).build();
        items.add(item);
        System.out.println(item);
        enumD.getMethods().forEach(method -> visitMethod(item, method));
        enumD.getFields().forEach(field -> visitField(item, field));
    }
}"
"visit","method","com.cloudurable.java2csv.ClassVisitor.visit","@Override
public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
    if (!cls.isInnerClass()) {
        visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), cls);
    }
    super.visit(cls, arg);
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visitClass","method","com.cloudurable.java2csv.ClassVisitor.visitClass","public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
    Item item = Item.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc(cls.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(cls, 200, """")).build();
    items.add(item);
    System.out.println(item);
    cls.getImplementedTypes().stream().filter(typ -> typ.isClassOrInterfaceType()).forEach(clsInner -> visitClassType(packageName, importBody, item, clsInner.asClassOrInterfaceType()));
    cls.getMethods().forEach(method -> visitMethod(item, method));
    cls.getFields().forEach(field -> visitField(item, field));
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visitClassType","method","com.cloudurable.java2csv.ClassVisitor.visitClassType","private void visitClassType(String packageName, String importBody, Item parent, ClassOrInterfaceType cls) {
    Item item = Item.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(cls.toString())).javadoc("""").parent(parent).body(getBodyDefinition(cls, 200, """")).build();
    items.add(item);
    System.out.println(item);
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visitField","method","com.cloudurable.java2csv.ClassVisitor.visitField","private void visitField(Item parent, FieldDeclaration field) {
    Item item = Item.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(field.toString()).javadoc(field.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
    items.add(item);
    System.out.println(item);
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visitMethod","method","com.cloudurable.java2csv.ClassVisitor.visitMethod","public void visitMethod(Item parent, final MethodDeclaration method) {
    Item item = Item.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(method.toString()).javadoc(method.getJavadoc().map(Object::toString).orElse("""")).parent(parent).build();
    items.add(item);
    System.out.println(item);
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visit","method","com.cloudurable.java2csv.ClassVisitor.visit","@Override
public void visit(EnumDeclaration n, Void arg) {
    visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""\n"")), n);
    super.visit(n, arg);
}","","com.cloudurable.java2csv.ClassVisitor","",""
"visitEnum","method","com.cloudurable.java2csv.ClassVisitor.visitEnum","private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
    Item item = Item.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(enumD.toString())).javadoc(enumD.getJavadoc().map(Object::toString).orElse("""")).body(getBodyDefinition(enumD, 200, """")).build();
    items.add(item);
    System.out.println(item);
    enumD.getMethods().forEach(method -> visitMethod(item, method));
    enumD.getFields().forEach(field -> visitField(item, field));
}","","com.cloudurable.java2csv.ClassVisitor","",""
"compilationUnit","field","com.cloudurable.java2csv.ClassVisitor.compilationUnit","private final CompilationUnit compilationUnit;","","com.cloudurable.java2csv.ClassVisitor","",""
"items","field","com.cloudurable.java2csv.ClassVisitor.items","private final List<Item> items;","","com.cloudurable.java2csv.ClassVisitor","",""
"JavaItemType","enum","com.cloudurable.java2csv.JavaItemType","public enum JavaItemType { /* the rest ... */ }","","","","public enum JavaItemType {

    CLASS, INTERFACE, ENUM, METHOD, FIELD
}"
"Item","class","com.cloudurable.java2csv.Item","public class Item { /* the rest ... */ }","","","import java.util.List;
","public class Item {

    private final String importBody;

    private final String body;

    private final String javadoc;

    private final String name;

    private final String simpleName;

    private final String definition;

    private final Item parent;

    private final JavaItemType type;

    public Item(String importBody, String body, String javadoc, String name, String simpleName, String definition, Item parent, JavaItemType type) {
        this.importBody = orEmptyString(importBody);
        this.body = orEmptyString(body);
        this.javadoc = orEmptyString(javadoc);
        this.name = orEmptyString(name);
        this.simpleName = orEmptyString(simpleName);
        this.definition = orEmptyString(definition);
        this.parent = parent;
        this.type = type;
    }

    private String orEmptyString(String part) {
        return part == null ? """" : part;
    }

    public static List<String> headers() {
        return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
    }

    public List<String> row() {
        return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
    }

    public String getImportBody() {
        return importBody;
    }

    public String getBody() {
        return body;
    }

    public String getJavadoc() {
        return javadoc;
    }

    public String getName() {
        return name;
    }

    public String getDefinition() {
        return definition;
    }

    public Item getParent() {
        return parent;
    }

    public JavaItemType getType() {
        return type;
    }

    @Override
    public String toString() {
        return ""Item{"" + ""simpleName='"" + simpleName + '\'' + "", type="" + type + "", name='"" + name + '\'' + "", definition='"" + definition + '\'' + "", parent="" + parent + "", importBody='"" + importBody + '\'' + "", javadoc='"" + javadoc + '\'' + "", body='"" + body + '\'' + '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private Builder() {
        }

        private String body;

        private String javadoc;

        private String name;

        private String definition;

        private Item parent;

        private String importBody;

        private String simpleName;

        public Builder simpleName(String simpleName) {
            this.simpleName = simpleName;
            return this;
        }

        private JavaItemType type;

        public Builder type(JavaItemType type) {
            this.type = type;
            return this;
        }

        public Builder importBody(String importBody) {
            this.importBody = importBody;
            return this;
        }

        public Builder body(String body) {
            this.body = body;
            return this;
        }

        public Builder javadoc(String javadoc) {
            this.javadoc = javadoc;
            return this;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder definition(String definition) {
            this.definition = definition;
            return this;
        }

        public Builder parent(Item parent) {
            this.parent = parent;
            return this;
        }

        public Item build() {
            return new Item(importBody, body, javadoc, name, simpleName, definition, parent, type);
        }
    }
}"
"orEmptyString","method","com.cloudurable.java2csv.Item.orEmptyString","private String orEmptyString(String part) {
    return part == null ? """" : part;
}","","com.cloudurable.java2csv.Item","",""
"headers","method","com.cloudurable.java2csv.Item.headers","public static List<String> headers() {
    return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
}","","com.cloudurable.java2csv.Item","",""
"row","method","com.cloudurable.java2csv.Item.row","public List<String> row() {
    return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
}","","com.cloudurable.java2csv.Item","",""
"getImportBody","method","com.cloudurable.java2csv.Item.getImportBody","public String getImportBody() {
    return importBody;
}","","com.cloudurable.java2csv.Item","",""
"getBody","method","com.cloudurable.java2csv.Item.getBody","public String getBody() {
    return body;
}","","com.cloudurable.java2csv.Item","",""
"getJavadoc","method","com.cloudurable.java2csv.Item.getJavadoc","public String getJavadoc() {
    return javadoc;
}","","com.cloudurable.java2csv.Item","",""
"getName","method","com.cloudurable.java2csv.Item.getName","public String getName() {
    return name;
}","","com.cloudurable.java2csv.Item","",""
"getDefinition","method","com.cloudurable.java2csv.Item.getDefinition","public String getDefinition() {
    return definition;
}","","com.cloudurable.java2csv.Item","",""
"getParent","method","com.cloudurable.java2csv.Item.getParent","public Item getParent() {
    return parent;
}","","com.cloudurable.java2csv.Item","",""
"getType","method","com.cloudurable.java2csv.Item.getType","public JavaItemType getType() {
    return type;
}","","com.cloudurable.java2csv.Item","",""
"toString","method","com.cloudurable.java2csv.Item.toString","@Override
public String toString() {
    return ""Item{"" + ""simpleName='"" + simpleName + '\'' + "", type="" + type + "", name='"" + name + '\'' + "", definition='"" + definition + '\'' + "", parent="" + parent + "", importBody='"" + importBody + '\'' + "", javadoc='"" + javadoc + '\'' + "", body='"" + body + '\'' + '}';
}","","com.cloudurable.java2csv.Item","",""
"builder","method","com.cloudurable.java2csv.Item.builder","public static Builder builder() {
    return new Builder();
}","","com.cloudurable.java2csv.Item","",""
"importBody","field","com.cloudurable.java2csv.Item.importBody","private final String importBody;","","com.cloudurable.java2csv.Item","",""
"body","field","com.cloudurable.java2csv.Item.body","private final String body;","","com.cloudurable.java2csv.Item","",""
"javadoc","field","com.cloudurable.java2csv.Item.javadoc","private final String javadoc;","","com.cloudurable.java2csv.Item","",""
"name","field","com.cloudurable.java2csv.Item.name","private final String name;","","com.cloudurable.java2csv.Item","",""
"simpleName","field","com.cloudurable.java2csv.Item.simpleName","private final String simpleName;","","com.cloudurable.java2csv.Item","",""
"definition","field","com.cloudurable.java2csv.Item.definition","private final String definition;","","com.cloudurable.java2csv.Item","",""
"parent","field","com.cloudurable.java2csv.Item.parent","private final Item parent;","","com.cloudurable.java2csv.Item","",""
"type","field","com.cloudurable.java2csv.Item.type","private final JavaItemType type;","","com.cloudurable.java2csv.Item","",""
"Builder","class","com.cloudurable.java2csv.Builder","public static class Builder { /* the rest ... */ }","","","import java.util.List;
","public static class Builder {

    private Builder() {
    }

    private String body;

    private String javadoc;

    private String name;

    private String definition;

    private Item parent;

    private String importBody;

    private String simpleName;

    public Builder simpleName(String simpleName) {
        this.simpleName = simpleName;
        return this;
    }

    private JavaItemType type;

    public Builder type(JavaItemType type) {
        this.type = type;
        return this;
    }

    public Builder importBody(String importBody) {
        this.importBody = importBody;
        return this;
    }

    public Builder body(String body) {
        this.body = body;
        return this;
    }

    public Builder javadoc(String javadoc) {
        this.javadoc = javadoc;
        return this;
    }

    public Builder name(String name) {
        this.name = name;
        return this;
    }

    public Builder definition(String definition) {
        this.definition = definition;
        return this;
    }

    public Builder parent(Item parent) {
        this.parent = parent;
        return this;
    }

    public Item build() {
        return new Item(importBody, body, javadoc, name, simpleName, definition, parent, type);
    }
}"
"simpleName","method","com.cloudurable.java2csv.Builder.simpleName","public Builder simpleName(String simpleName) {
    this.simpleName = simpleName;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"type","method","com.cloudurable.java2csv.Builder.type","public Builder type(JavaItemType type) {
    this.type = type;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"importBody","method","com.cloudurable.java2csv.Builder.importBody","public Builder importBody(String importBody) {
    this.importBody = importBody;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"body","method","com.cloudurable.java2csv.Builder.body","public Builder body(String body) {
    this.body = body;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"javadoc","method","com.cloudurable.java2csv.Builder.javadoc","public Builder javadoc(String javadoc) {
    this.javadoc = javadoc;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"name","method","com.cloudurable.java2csv.Builder.name","public Builder name(String name) {
    this.name = name;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"definition","method","com.cloudurable.java2csv.Builder.definition","public Builder definition(String definition) {
    this.definition = definition;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"parent","method","com.cloudurable.java2csv.Builder.parent","public Builder parent(Item parent) {
    this.parent = parent;
    return this;
}","","com.cloudurable.java2csv.Builder","",""
"build","method","com.cloudurable.java2csv.Builder.build","public Item build() {
    return new Item(importBody, body, javadoc, name, simpleName, definition, parent, type);
}","","com.cloudurable.java2csv.Builder","",""
"body","field","com.cloudurable.java2csv.Builder.body","private String body;","","com.cloudurable.java2csv.Builder","",""
"javadoc","field","com.cloudurable.java2csv.Builder.javadoc","private String javadoc;","","com.cloudurable.java2csv.Builder","",""
"name","field","com.cloudurable.java2csv.Builder.name","private String name;","","com.cloudurable.java2csv.Builder","",""
"definition","field","com.cloudurable.java2csv.Builder.definition","private String definition;","","com.cloudurable.java2csv.Builder","",""
"parent","field","com.cloudurable.java2csv.Builder.parent","private Item parent;","","com.cloudurable.java2csv.Builder","",""
"importBody","field","com.cloudurable.java2csv.Builder.importBody","private String importBody;","","com.cloudurable.java2csv.Builder","",""
"simpleName","field","com.cloudurable.java2csv.Builder.simpleName","private String simpleName;","","com.cloudurable.java2csv.Builder","",""
"type","field","com.cloudurable.java2csv.Builder.type","private JavaItemType type;","","com.cloudurable.java2csv.Builder","",""
